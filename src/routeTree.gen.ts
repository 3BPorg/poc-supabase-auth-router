/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'

// Create Virtual Routes

const AuthIndexLazyImport = createFileRoute('/auth/')()
const AuthedIndexLazyImport = createFileRoute('/_authed/')()

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/auth/index.lazy').then((d) => d.Route))

const AuthedIndexLazyRoute = AuthedIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any).lazy(() => import('./routes/_authed/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexLazyImport
      parentRoute: typeof AuthedImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedIndexLazyRoute: typeof AuthedIndexLazyRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexLazyRoute: AuthedIndexLazyRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/': typeof AuthedIndexLazyRoute
  '/auth': typeof AuthIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof AuthedIndexLazyRoute
  '/auth': typeof AuthIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/': typeof AuthedIndexLazyRoute
  '/auth/': typeof AuthIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/auth'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth'
  id: '__root__' | '/_authed' | '/_authed/' | '/auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  AuthIndexLazyRoute: AuthIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/auth/"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/"
      ]
    },
    "/_authed/": {
      "filePath": "_authed/index.lazy.tsx",
      "parent": "/_authed"
    },
    "/auth/": {
      "filePath": "auth/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
